
# Food lookup and browser

GET         /foods/:locale/split-description             controllers.food.user.FoodLookupController.getSplitSuggestion(locale: String, desc: String)
GET         /foods/:locale/lookup                        controllers.food.user.FoodLookupController.lookup(locale: String, desc: String, existing: Seq[String], limit: Int ?= 50, alg: String ?= "paRules", matchScoreWeight: Int ?= 0)
GET         /foods/:locale/lookup-for-recipes            controllers.food.user.FoodLookupController.lookupForRecipes(locale: String, desc: String, existing: Seq[String], limit: Int ?= 50, alg: String ?= "paRules", matchScoreWeight: Int ?= 0)
GET         /foods/:locale/lookup-in-category            controllers.food.user.FoodLookupController.lookupInCategory(locale: String, desc: String, category: String, existing: Seq[String], limit: Int ?= 50, alg: String ?= "paRules", matchScoreWeight: Int ?= 0)

GET         /categories/:locale/:code                    controllers.food.user.FoodDataController.getCategoryContents(code: String, locale: String, existing: Seq[String], alg: String)
GET         /categories/:locale                          controllers.food.user.FoodDataController.getRootCategories(locale: String)

# Associated foods based on pairwise associations

GET         /foods/associated/:locale                    controllers.food.user.FoodDataController.getPairwiseAssociatedFoods(locale: String, f: Seq[String])

# Food and portion size estimation data

GET         /foods/:locale/:code                         controllers.food.user.FoodDataController.getFoodData(code: String, locale: String)
GET         /foods/:locale/:code/with-sources            controllers.food.user.FoodDataController.getFoodDataWithSources(code: String, locale: String)
GET         /foods/:locale/:code/brand-names             controllers.food.user.FoodDataController.getBrandNames(code: String, locale: String)
GET         /foods/:locale/:code/associated-foods        controllers.food.user.FoodDataController.getAssociatedFoodPrompts(code: String, locale: String)


GET         /portion-size/weight                         controllers.food.user.FoodDataController.getWeightPortionSizeMethod()
GET         /portion-size/as-served/:id                  controllers.food.user.FoodDataController.getAsServedSet(id: String)
POST        /portion-size/as-served                      controllers.food.user.FoodDataController.getAsServedSets()
GET         /portion-size/guide-image/:id                controllers.food.user.FoodDataController.getGuideImage(id: String)
GET         /portion-size/image-maps/:id                 controllers.food.user.FoodDataController.getImageMap(id: String)
POST        /portion-size/image-maps                     controllers.food.user.FoodDataController.getImageMaps()
GET         /portion-size/drinkware/:id                  controllers.food.user.FoodDataController.getDrinkwareSet(id: String)

# Food composition

GET         /foods/:locale/:code/composition             controllers.food.user.FoodDataController.getFoodComposition(code: String, locale: String, weight: Option[Double])

# Feedback

GET         /feedback/five-a-day                         controllers.food.user.FeedbackDataController.getFiveADayFeedback()
GET         /feedback/food-groups                        controllers.food.user.FeedbackDataController.getFoodGroupsFeedback()
